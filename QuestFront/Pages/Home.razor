@page "/"
@using QuestTrakingAPI.DataBase.DTO
@using QuestFront.Pages.Components
@inject HttpClient HttpClient

<PageTitle>Home</PageTitle>


<div class="home-container">
    <h1>Quest Tracking!</h1>

    <div class="forms-wrapper">
        <!-- Форма добавления пользователя -->
        <EditForm Model="@newUser" OnValidSubmit="HandleValidUserSubmit" class="form-container">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="userName">Имя</label>
                <input id="userName"
                       type="text"
                       class="form-control"
                       @bind="newUser.Name"
                       maxlength="50"
                       required />
            </div>
            <div class="form-group">
                <label for="userEmail">Email</label>
                <input id="userEmail"
                       type="email"
                       class="form-control"
                       @bind="newUser.Email"
                       required />
            </div>
            <button type="submit" class="btn">Добавить пользователя</button>
        </EditForm>

        <!-- Форма добавления задачи -->
        <EditForm Model="@newQuest" OnValidSubmit="HandleValidQuestSubmit" class="form-container">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="questTitle">Заголовок</label>
                <input id="questTitle"
                       type="text"
                       class="form-control"
                       @bind="newQuest.Title"
                       maxlength="100"
                       required />
            </div>
            <div class="form-group">
                <label for="questDescription">Описание</label>
                <textarea id="questDescription"
                          class="form-control"
                          @bind="newQuest.Description"
                          required></textarea>
            </div>
            <div class="form-group checkbox-group">
                <input id="questCompleted"
                       type="checkbox"
                       @bind="newQuest.IsCompleted" />
                <label for="questCompleted">Выполнено</label>
            </div>
            <div class="form-group">
                <label for="questEmailUser">Email пользователя</label>
                <input id="questEmailUser"
                       type="email"
                       class="form-control"
                       @bind="newQuest.EmailUser"
                       required />
            </div>
            <button type="submit" class="btn">Добавить задачу</button>
        </EditForm>
    </div>

    @if (Users.Count > 0)
    {
        foreach (var item in Users)
        {
            <UsersCards user="item" />
        }
    }
</div>



@code {
    List<User> Users = new List<User>();
    private User someUser = new User
    {
        Name = "Иван Иванов",
        Email = "ivan@example.com",
        CreatedAt = DateTime.UtcNow.AddDays(-10),
        Quests = new List<Quest>
        {
            new Quest { Title = "Пройти обучение", IsCompleted = true },
            new Quest { Title = "Создать проект", IsCompleted = false }
        }
    };

    private User someUser2 = new User
        {
            Name = "Иван Иванов",
            Email = "ivan@example.com",
            CreatedAt = DateTime.UtcNow.AddDays(-10),
            Quests = new List<Quest>
        {
            new Quest { Title = "Пройти обучение", IsCompleted = true },
            new Quest { Title = "Создать проект", IsCompleted = false }
        }
        };
    string baseUrl = "https://localhost:7189";
    string questUrl = "/api/Quest";
    string user = "/api/Users";

    protected override async Task OnInitializedAsync()
    {
        Users.Add(someUser);
        Users.Add(someUser2);
      
    }
    private RequestUser newUser = new();
    private RequestQuest newQuest = new();
    private void HandleValidUserSubmit()
    {
        // TODO: логика сохранения нового пользователя
        Console.WriteLine($"Добавлен пользователь: {newUser.Name} ({newUser.Email})");
        newUser = new RequestUser(); // очистить форму
    }

    private void HandleValidQuestSubmit()
    {
        // TODO: логика сохранения новой задачи
        Console.WriteLine($"Добавлена задача: {newQuest.Title} для {newQuest.EmailUser}");
        newQuest = new RequestQuest(); // очистить форму
    }
}
